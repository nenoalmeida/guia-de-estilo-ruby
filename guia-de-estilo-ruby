Guia de estilo Ruby


Use espaços entre operadores, e pontos de interrogação ('{', '}') depois de virgulas e ponto e virgula

sum = 1 + 2
a, b = 1, 2
1 > 2 ? true : false; puts "hi"
[1, 2, 3].each { |e| puts e }

Não use espaço depois de '(', ou entre parentesis ('[', ']').

some(arg).other
[1, 2, 3].length

Identar o resultado do termo "when" 

when song.name == 'Tik Tok'
  puts "Not again!"
when song.duration > 120
  puts "That's really long"
when Time.now.hour > 21
  puts "It's time to start coding"
else
  song.play
end

epoch = case year
        when 1607..1777 then "Colonial Period"
        when 1778..1812 then "Early Republic"

Use uma linha vazia depois de terornar o valor de um metodo
(a menos que seja apenas uma linha) e uma linha entre as declarações "def".      
        
    def some_method
  do_something
  do_something_else

  result
end

def do_something
  result
end



Use RDoc como uma convenção da documentação (SDoc pode ser usado para gerar melhor mecanismo de busca na documentação).
Use uma linha vazia para quebrar o metodo para um paragrafo logico
Mantenha linhas abaixo de 80 caracteres

Sintaxe

use o def entre pasentesis quando houver argumentos. Omita os parenteses quando o metodo nao aceitar nenhum argumento
def some_method
  # payload
end

def method_with_arguments(arg1, arg2)
  # payload
end
Nunca use "for", a menos que voce saiba exatamente o porque. Iteradores devem ser usados em seu lugar
arr = [1, 2, 3]

# errado
for elem in arr do
  puts elem
end

# correto
array.each { |elem| puts elem }

nunca use-o para multiplas linhas if/unless

# errado
if some_condition then
  # payload
end

# correto
if some_condition
  # payload
end

De preferencia aos seus operadores de construção ternaria no lugar de if/then/else/end.  É mais comum e conciso.

# errado
result = if some_condition then something else something_else end

# correto
result = some_condition ? something : something_else

Use apenas uma expressão de operador ternario por branch. Isso significa que o operador ternario precisa estar anunhado. Prefira 
construçoes if/else neses casos.

# errado
some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else

# correto
if some_condition
  nested_condition ? nested_something : nested_something_else
else
  something_else
end

Utilize && e || para expressoes booleanas. Use and ou for para o controle de fluxo

# expressão booleana
if some_condition && some_other_condition
  do_something
end

# fluxo de controle
document.saved? or document.save!

Evite operadores ternarios de multiplas linas, use if/unless no lugar deles.
De preferencia por modificar o uso de if/unless quando voce tiver uma linha apenas

# errado
if some_condition
  do_something
end

# correto
do_something if some_condition

# outra boa opção
some_condition and do_something
De preferencia para o uso do if para conditionais negativas (ou a conditional or)


Inibir parentesis superfulos quando chamamos os metodos, mas mante-lo quando chamamod "funçoes", i.e. Quando voce usa o retorno do valor 
na mesma linha

x = Math.sin(y)
array.delete e

Prefira {...} no lugar de do...end em blocos de uma linha. Evite usar {...} para blocos de multiplas linhas.
Sempre use do...end para "controlar o fluxo" e "definir o metodo" (e.g no Rakefiles e certos DSLs.) Evite do...end quando estiver encadeando

Evite "return" onde não for requisitado.

# errado
def some_method(some_arr)
  return some_arr.size
end

# correto
def some_method(some_arr)
  some_arr.size
end

Evite  linha coninua (\) onde nao requisitado. Na pratica, evite o uso de linha continua como um todo.

# errado
result = 1 - \
         2

# correto (mais ainda tá muito feio)
result = 1 \
         - 2

